README bluealsa


CONFIGURATION & USAGE
=====================

The main component of BlueALSA is a program called bluealsa.  By default, this
program shall be run as a root during system startup.  It will register
org.bluealsa service in the D-Bus system bus, which can be used for accessing
configured audio devices.  In general, BlueALSA acts as a proxy between BlueZ
and ALSA.

For details of command-line options to bluealsa, consult the bluealsa man
page.

In order to stream audio to the e.g.  Bluetooth headset, firstly one has to
connect the device.  The most straightforward method is to use BlueZ CLI
utility called bluetoothctl.  When the device is connected one can use the
bluealsa virtual PCM device as follows:

	aplay -D bluealsa:DEV=XX:XX:XX:XX:XX:XX,PROFILE=a2dp \
		Bourree_in_E_minor.wav

Setup parameters of the bluealsa PCM device can be set in the local .asoundrc
configuration file like this:

	~/.asoundrc:
	defaults.bluealsa.service "org.bluealsa"
	defaults.bluealsa.device "XX:XX:XX:XX:XX:XX"
	defaults.bluealsa.profile "a2dp"
	defaults.bluealsa.delay 10000

BlueALSA also allows to capture audio from the connected Bluetooth device.  To
do so, one has to use the capture PCM device, e.g.:

	arecord -D bluealsa capture.wav

Using this feature, it is possible to create Bluetooth-powered speaker.  It is
required to forward audio signal from the BlueALSA capture PCM to some other
playback PCM (e.g. build-id audio card).  In order to simplify this task,
there is a program called bluealsa-aplay, which acts as a simple BlueALSA
player.  Connect your Bluetooth device (e.g. smartphone) and do as follows:

	bluealsa-aplay XX:XX:XX:XX:XX:XX

For details of command-line options to bluealsa-aplay, consult the
bluealsa-aplay(1) man page.

In addition to A2DP profile, used for high quality audio, BlueALSA also allows
to use phone audio connection via SCO link.  One can use either build-in
HSP/HFP support, which implements only audio related part of the
specification, or use oFono https://01.org/ofono service as a back-end.  In
order to open SCO audio connection one shall switch to sco profile like
follows:

	aplay -D bluealsa:DEV=XX:XX:XX:XX:XX:XX,PROFILE=sco \
		Bourree_in_E_minor.wav

The list of available BlueALSA PCMs (provided by connected Bluetooth devices
with audio capabilities) can be obtained directly from BlueALSA D-Bus API
https://github.com/Arkq/bluez-alsa/blob/master/doc/bluealsa-api.txt
or using bluealsa-aplay as a convenient wrapper as follows:

	bluealsa-aplay -L

In order to control input or output audio level, one can use provided bluealsa
control plugin.  This plugin allows adjusting the volume of the audio stream
or simply mute/unmute it, e.g.:

	amixer -D bluealsa sset '<control name>' 70%

where the control name is the name of a connected Bluetooth device with a
control element suffix, e.g.:

	amixer -D bluealsa sset 'Jabra MOVE v2.3.0 - A2DP' 50%

For more advanced ALSA configuration, consult the asoundrc on-line
documentation provided by the AlsaProject wiki page:
https://www.alsa-project.org/main/index.php/Asoundrc


TROUBLESHOOTING
===============

Using BlueALSA alongside with PulseAudio
----------------------------------------

Due to BlueZ limitations, it seems, that it is not possible to use BlueALSA
and PulseAudio to handle Bluetooth audio together.  BlueZ can not handle more
than one application which registers audio profile in the Bluetooth stack.
However, it is possible to run BlueALSA and PulseAudio alongside, but
Bluetooth support has to be disabled in the PulseAudio.  Any Bluetooth related
module has to be unloaded - e.g.  bluetooth-discover, bluez5-discover.

ALSA thread-safe API (alsa-lib >= 1.1.2, <= 1.1.3)
--------------------------------------------------

Starting from ALSA library 1.1.2, it is possible to enable thread-safe
API functions.  It is a noble change, but the implementation leaves a
lot to be desired.  This "minor" change does not affect hardware audio
devices (because for hardware devices, this change is disabled), but
it affects A LOT all software plug-ins.  Random deadlocks are
inevitable.  My personal advice is to disable it during alsa-lib
configuration step (./configure --disable-thread-safety), or if it is
not possible (installation from a package repository), disable it via
an environmental variable, as follows:

	export LIBASOUND_THREAD_SAFE=0

Couldn't acquire D-Bus name: org.bluealsa
-----------------------------------------

It is not possible to run more than one instance of the BlueALSA server per
D-Bus interface.  If one tries to run second instance, it will fail with the
"Couldn't acquire D-Bus name: org.bluealsa" error message.  This message might
also appear when D-Bus policy does not allow acquiring "org.bluealsa" name for
a particular user - by default only root is allowed to start BlueALSA server.

Couldn't get BlueALSA PCM: PCM not found
----------------------------------------

In contrast to standard ALSA sound cards, BlueALSA does not expose all PCMs
right away.  In the first place it is required to connect remote Bluetooth
device with desired Bluetooth profile.  Run the following command to list
available profiles:

	bluealsa --help

For querying currently connected audio profiles (and connected devices), run
the following command:

	bluealsa-aplay --list-devices

The common misconception is an attempt to use A2DP playback device as a
capture one in case where A2DP is not listed in the "List of CAPTURE Bluetooth
Devices" section.

Additionally, the cause of the "PCM not found" error might be an incorrect
ALSA PCM name.  Run the following command to list currently available ALSA PCM
names:

	bluealsa-aplay --list-pcms

It might give you a hint what is wrong with your  .asoundrc  entry.  Also,
take a look at the bluealsa-plugins(7) and wiki page:
https://github.com/Arkq/bluez-alsa/wiki


End of file.
